name: "Validate PR Labels & Tag on Merge"
on:
  pull_request:
    types: [opened, reopened, labeled, unlabeled, synchronize, closed] 

jobs:
  validate-labels:
    runs-on: ubuntu-latest
    outputs:
      labels: ${{ steps.get-labels.outputs.labels }}
    steps:
      - name: Check PR Labels
        id: get-labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LABELS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" | jq -r '.[].name' | tr '\n' ',')

          LABELS=$(echo "$LABELS" | sed 's/,$//')

          if [ -z "$LABELS" ]; then
            echo "❌ No labels found! This PR cannot be merged until labels are added."
            exit 1
          else
            echo "✅ Labels found: $LABELS"
            echo "labels=$LABELS" >> "$GITHUB_OUTPUT"
          fi

  tag-release:
    runs-on: ubuntu-latest
    needs: validate-labels
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git with PR Author
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Fetch latest tags
        run: git fetch --tags

      - name: Generate tags from labels
        id: generate_tags
        env:
          LABELS: ${{ needs.validate-labels.outputs.labels }}
        run: |
          echo "LABELS: $LABELS"
          TAGS=()
          IFS=',' read -r -a LABEL_ARRAY <<< "$LABELS" # Split comma-separated labels into an array

          for label in "${LABEL_ARRAY[@]}"; do
            LATEST_TAG=$(git tag --list "$label-v*" | sort -V | tail -n 1 || true)
            if [[ -z "$LATEST_TAG" ]]; then
              NEW_TAG="${label}-v1"
            else
              VERSION=$(echo "$LATEST_TAG" | sed -n 's/.*-v\([0-9]\+\)/\1/p')
              NEW_TAG="${label}-v$((VERSION + 1))"
            fi

            TAGS+=("$NEW_TAG")
            echo "Generated tag: $NEW_TAG"
          done

          echo "TAGS=${TAGS[*]}" >> "$GITHUB_ENV"

      - name: Create and push tags
        run: |
          for tag in ${TAGS[@]}; do
            git tag "$tag" -m "Tagging release: $tag"
          done
          git push origin --tags