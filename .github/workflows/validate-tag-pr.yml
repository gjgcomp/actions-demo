name: "Validate PR Labels & Tag on Merge"
on:
  workflow_call:
    inputs:
      is_exempt:
        required: true
        type: string
    secrets:
      HES_CI_CD_APP_ID:
        required: true
      HES_CI_CD_PRIVATE_KEY:
        required: true
      HES_CI_CD_INSTALLATION_ID:
        required: true

jobs:
  fetch-labels:
    runs-on: ubuntu-latest
    outputs:
      labels: ${{ steps.get-labels.outputs.labels }}
    steps:
      - name: Get PR Labels
        id: get-labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LABELS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                    -H "Accept: application/vnd.github.v3+json" \
                    "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" | jq -r '.[].name' | tr '\n' ',')

          LABELS=$(echo "$LABELS" | sed 's/,$//')
          echo "labels=$LABELS" >> "$GITHUB_OUTPUT"
    
  validate-labels:
    needs: fetch-labels
    runs-on: ubuntu-latest
    steps:
      - name: Validate Labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LABELS: ${{ needs.fetch-labels.outputs.labels }}
        run: |
          if [ -z "$LABELS" ]; then
            echo "❌ No labels found! This PR cannot be merged until labels are added."
            exit 1
          else
            echo "✅ Labels found: $LABELS"
          fi
      
  update-version:
    runs-on: ubuntu-latest
    needs:
      - fetch-labels
    if: github.event.pull_request.merged == true
    steps:
      - name: Get App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.HES_CI_CD_APP_ID }}
          private-key: ${{ secrets.HES_CI_CD_PRIVATE_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      
      - name: Config Git Identity
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

          #need to do this to get the app token to work with gh commands
          echo "${{ steps.app-token.outputs.token }}" | gh auth login --with-token

          gh auth setup-git

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
      
      - name: Extract Task ID from PR Body
        if: ${{ inputs.is_exempt == 'false' }}
        id: extract_task_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_BODY=$(jq -r '.pull_request.body' "$GITHUB_EVENT_PATH")
          TASK_ID=$(echo "$PR_BODY" | sed -n 's/.*Task ID:[[:space:]]*\([A-Za-z0-9_-]\+\).*/\1/p')
          
          if [[ -z "$TASK_ID" ]]; then
            echo "❌ No Task ID found in PR body! Skipping update."
            exit 1
          fi
          
          echo "TASK_ID=$TASK_ID" >> $GITHUB_ENV
          echo "✅ Task ID extracted: $TASK_ID"

      - name: Fetch latest tags
        run: git fetch --tags
        
      - name: Generate tags from labels
        id: generate_tags
        env:
          LABELS: ${{ needs.fetch-labels.outputs.labels }}
        run: |
          TAGS=()
          IFS=',' read -r -a LABEL_ARRAY <<< "$LABELS" # Split comma-separated labels into an array
          
          EXEMPT_LABEL="No ClickUp Task Needed"
          SKIP_QGATES_LABEL="Skip Quality Gates"
          for label in "${LABEL_ARRAY[@]}"; do
            #skip these labels if found. We don't want to create tags for these labels.
            if [[ "$label" == "$EXEMPT_LABEL" || "$label" == "$SKIP_QGATES_LABEL" ]]; then
              if [[ "$label" == "$SKIP_QGATES_LABEL" ]]; then
                echo "RUN_QGATES=false" >> $GITHUB_ENV
              fi
              continue
            fi
            
            LATEST_TAG=$(git tag --list "$label-v*" | sort -V | tail -n 1 || true)
            echo "LATEST_TAG for $label: $LATEST_TAG"
            
            if [[ -z "$LATEST_TAG" ]]; then
              NEW_TAG="${label}-v1"
            else
              VERSION=$(echo "$LATEST_TAG" | sed -n 's/.*-v\([0-9]\+\)/\1/p')
              NEW_TAG="${label}-v$((VERSION + 1))"
            fi

            TAGS+=("$NEW_TAG")
            echo "Generated tag: $NEW_TAG"
          done

          echo "TAGS=${TAGS[*]}" >> $GITHUB_ENV

      - name: Create tags and update release-mappings.yml
        run: |
          echo "Updating release-mappings.yml and creating tags..."

          YAML_FILE="release-mappings.yml"
          TEMP_FILE="release-mappings.tmp.yml"

          if [[ ! -f "$YAML_FILE" ]]; then
            echo "tags: []" > "$YAML_FILE"
          fi

          for tag in $TAGS; do
            if git rev-parse "$tag" >/dev/null 2>&1; then
              echo "⚠️ Tag '$tag' already exists. Skipping..."
              continue
            fi

            if [[ -z "$TASK_ID" ]]; then
              TASK_ID="none"
            fi

            if [[ -z "$RUN_QGATES" ]]; then
              RUN_QGATES="true"
            fi

            yq eval '.tags += [{"git_tag": "'$tag'", "clickup_id": "'$TASK_ID'", "run_quality_gates": "'$RUN_QGATES'"}]' "$YAML_FILE" > "$TEMP_FILE"
            mv "$TEMP_FILE" "$YAML_FILE"
          done

          cat "$YAML_FILE"

          git add release-mappings.yml
          git commit -m "Update release-mappings.yml with new git tags"
          git push origin HEAD:${{ github.ref_name }} #Needs to happen first, or else concourse won't see updated variables file
          
          for tag in $TAGS; do
            git tag "$tag" -m "Tagging release: $tag"
          done

          git push origin --tags #Needs to happen last